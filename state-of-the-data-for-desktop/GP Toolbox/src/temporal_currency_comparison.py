"""-----------------------------------------------------------------------------
Name: temporal_currency_comparison.py
Purpose: Compares the DOM_DATE values from two feature classes that have been
        run through the temoral_currency.py tool.
Description: This tool compares the Temporal Currency results for two different
        features classes and determines the differences in those currency
        values. The input feature classes must first be generated by running
        Temporal Currency or temporal_currency.py.
Requirements: Python 2.7.x/Python3.x, ArcGIS 10.4+/Pro 1.2+
Author(s): Gregory Brunner, Contractor for National Geospatial-Intelligence
        Agency (NGA) | Andrew Chapkowski, Contractor NGA
Program Manager: Derek Silva, NGA (Derek.A.Silva@nga.mil)
Created: August, 2016
Modified: April, 2017
Copyright: Esri
License: TBD
-----------------------------------------------------------------------------"""
#3rd party imports
import arcpy
arcpy.env.overwriteOutput = True

def calculate_comparison_score(output):
    #fields = ["FEATURE_CNT","FEATURE_CNT_C","FEATURE_CNT_DIF","DOM_YEAR","DOM_YEAR_C","DOM_YEAR_DIF","MED_YEAR","MED_YEAR_C","MED_YEAR_DIF","MED_DIF_SCORE","SCORE_TXT"]
    fields = ["FEATURE_CNT","FEATURE_CNT_C","FEATURE_CNT_DIF","DOM_YEAR","DOM_YEAR_C","DOM_YEAR_DIF","DIF_SCORE","SCORE_TXT"]
    with arcpy.da.UpdateCursor(output,fields) as cursor:
        for row in cursor:
            # Calculate Differences
            row[2] = row[0]-row[1]
            row[5] = row[3]-row[4]
            #row[8] = row[6]-row[7]
            # Calculate Score Range
            if (row[5] > 1):
                row[6] = 5
                row[7] = "5 - More than one year newer"
            elif (row[5] == 1):
                row[6] = 4
                row[7] = "4 - One year newer"
            elif (row[5] == 0):
                row[6] = 3
                row[7] = "3 - Equal"
            elif (row[5] == -1):
                row[6] = 2
                row[7] = "2 - One year older"
            elif (row[5] < -1):
                row[6] = 1
                row[7] = "1 - More than one year older"
            else: #This should never happen
                row[6] = 0
                row[7] = "No Data"

            cursor.updateRow(row)

def compare_temporal_currency(source_TemporalCurrencyResults, comparison_TemporalCurrencyResults, output_ComparisonResults):
    # Get field mappings for new output
    #FieldMapping = make_field_mappings(source_TemporalCurrencyResults,comparison_TemporalCurrencyResults, output_ComparisonResults)

    # Spatial Join to create output
    arcpy.AddMessage("Joining Datasets")
    arcpy.SpatialJoin_analysis(source_TemporalCurrencyResults, comparison_TemporalCurrencyResults, output_ComparisonResults, "JOIN_ONE_TO_ONE", "KEEP_ALL", '#', "ARE_IDENTICAL_TO","","")

    #"FEATURE_CNT_DIF","DOM_YEAR_C","DOM_YEAR_DIF","DIF_SCORE","SCORE_TXT"
    arcpy.AddField_management(output_ComparisonResults, "FEATURE_CNT_C", "LONG", 10)
    arcpy.AddField_management(output_ComparisonResults, "FEATURE_CNT_DIF", "LONG", 10)
    arcpy.AddField_management(output_ComparisonResults, "DOM_YEAR_C", "LONG", 10)
    arcpy.AddField_management(output_ComparisonResults, "DOM_YEAR_DIF", "LONG", 10)
    arcpy.AddField_management(output_ComparisonResults, "DIF_SCORE", "LONG", 10)
    arcpy.AddField_management(output_ComparisonResults, "SCORE_TXT", "TEXT", 48)

    arcpy.AddMessage("Copying Fields")
    arcpy.CalculateField_management(output_ComparisonResults,"FEATURE_CNT_C", "!FEATURE_CNT_1!", "PYTHON")
    arcpy.CalculateField_management(output_ComparisonResults, "DOM_YEAR_C","!DOM_YEAR_1!", "PYTHON")

    for field in arcpy.ListFields(output_ComparisonResults, '*_1'):
        arcpy.DeleteField_management(output_ComparisonResults, field.name)


    arcpy.DeleteField_management(output_ComparisonResults,"DOM_DATE")
    arcpy.DeleteField_management(output_ComparisonResults,"DOM_DATE_CNT")
    arcpy.DeleteField_management(output_ComparisonResults,"DOM_DATE_PER")
    arcpy.DeleteField_management(output_ComparisonResults,"DOM_YEAR_PER")
    arcpy.DeleteField_management(output_ComparisonResults,"DOM_YEAR_CNT")
    arcpy.DeleteField_management(output_ComparisonResults,"OLDEST_DATE")
    arcpy.DeleteField_management(output_ComparisonResults,"NEWEST_DATE")
    arcpy.DeleteField_management(output_ComparisonResults,"NO_DATE_CNT")
    arcpy.DeleteField_management(output_ComparisonResults,"NO_DATE_PER")
    arcpy.DeleteField_management(output_ComparisonResults,"PCT_2_YEAR")
    arcpy.DeleteField_management(output_ComparisonResults,"PCT_5_YEAR")
    arcpy.DeleteField_management(output_ComparisonResults,"PCT_10_YEAR")
    arcpy.DeleteField_management(output_ComparisonResults,"PCT_15_YEAR")
    arcpy.DeleteField_management(output_ComparisonResults,"PCT_15_PLUS_YEAR")
    arcpy.DeleteField_management(output_ComparisonResults,"Join_Count")
    arcpy.DeleteField_management(output_ComparisonResults,"TARGET_FID")

    # Calculate scores
    arcpy.AddMessage("Calculating Scores.")
    calculate_comparison_score(output_ComparisonResults)


if __name__ == '__main__':

    SOURCE = arcpy.GetParameterAsText(0)
    COMPARE = arcpy.GetParameterAsText(1)
    OUT = arcpy.GetParameterAsText(2)
    compare_temporal_currency(SOURCE,COMPARE,OUT)

